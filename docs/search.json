[
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "I have been involved with various teaching throughout my time as a postgrad. I have been tutored or been a Teaching Fellow in Animal Biology, Ecology, Ecological Statistics, and Computational Mathematics.\nClick on the tabs to the left to see more of a description about each role.",
    "crumbs": [
      "Teaching and Workshops",
      "Teaching"
    ]
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks",
    "section": "",
    "text": "Below is a selected list of talks from my research."
  },
  {
    "objectID": "research/2024_dynamic_ssf.html",
    "href": "research/2024_dynamic_ssf.html",
    "title": "Dynamic SSF",
    "section": "",
    "text": "In this paper we used harmonic terms to estimate temporally dynamic coefficients from step selection models, from which we simulated animal movement trajectories. The simulations with temporal dynamics gave informative hourly predictions of expected buffalo distribution (animations below), and also gave more accurate long-term predictions.",
    "crumbs": [
      "Research",
      "Dynamic SSF"
    ]
  },
  {
    "objectID": "research/2024_dynamic_ssf.html#animations-of-hourly-distributions",
    "href": "research/2024_dynamic_ssf.html#animations-of-hourly-distributions",
    "title": "Dynamic SSF",
    "section": "Animations of hourly distributions",
    "text": "Animations of hourly distributions\nThe observed buffalo locations for a given hour are shown as the white locations, and the heatmap is the result of running many (dynamic) SSF simulations. There are locations from several individual buffalo in this landscape extent.",
    "crumbs": [
      "Research",
      "Dynamic SSF"
    ]
  },
  {
    "objectID": "research/2024_dynamic_ssf.html#harmonic-regression-tutorial",
    "href": "research/2024_dynamic_ssf.html#harmonic-regression-tutorial",
    "title": "Dynamic SSF",
    "section": "Harmonic regression tutorial",
    "text": "Harmonic regression tutorial\nWe provide a script below is a walkthrough to build intuition around fitting models with harmonic interaction terms (harmonic regression).\nDynSSF_Walkthrough_Harmonics_and_selection_surfaces\nFor more scripts and data, please visit the GitHub repository: GitHub repo: https://github.com/swforrest/dynamic_SSF_sims\nCheck out the full paper here",
    "crumbs": [
      "Research",
      "Dynamic SSF"
    ]
  },
  {
    "objectID": "research/2022-moving-wildlife-forward.html",
    "href": "research/2022-moving-wildlife-forward.html",
    "title": "Testing Snapshot GPS Devices",
    "section": "",
    "text": "Description\nBefore we tracked kākā (Nestor meridionalis) with GPS devices, we wanted to assess the accuracy of the devices under varying canopy cover and topographic conditions, and assess the relationship between the number of satellites that the ephemeris information was captured from and the Horizontal Dilution of Precision (HDOP).\nThe devices were Lotek GPS VHF devices with SWIFT fixes, which is a snapshot algorithm. This means that instead of processing the satellite information (ephermis) on-board, it is stored for post-processing, saving battery during deployment.\n A kākā with a Lotek GPS VHF device with the SWIFT fix algorithm. We tracked 10 kākā for 5-6 months. Photo: Charlotte Patterson.\nGitHub repo: https://github.com/swforrest/SWIFT-GPS-Test\nCheck out the full paper here",
    "crumbs": [
      "Research",
      "Testing Snapshot GPS Devices"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scott Forrest",
    "section": "",
    "text": "Github\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Email\n  \n  \n     {{&lt; iconify academicons google-scholar-square &gt;}} Scholar\n  \n  \n     ORCID\n  \n  \n     Bluesky\n  \n\n  \n  \nI’m a PhD candidate in Mathematical Sciences at the Queensland University of Technology (QUT) in Brisbane, Australia, and I am researching animal movement methods and applications. In my research I have explored space use and home range approaches, some hidden Markov modelling, and step selection functions and their extensions, and I am also interested in the application of machine learning to ecological problems. I work at the interface between developing methodology and applications to scientific and conservation questions, and I am fascinated by the decision-making processes that lead to animal movement, from the level of neurobiology to population dynamics.\n\n\n\nBefore getting into ecology, and the some of data analysis methods that underlie it, I studied a Bachelor of Engineering (Naval Architecture) with Honours at Flinders University in Adelaide, South Australia and the Australian Maritime College in Launceston, Tasmania. During this degree I thoroughly enjoyed the research endeavour through my Honours project with Gregor MacFarlane, titled: Ship-Generated Solitons and the Dynamic Vessel Response as a Function of Blockage. You can read the article here and watch a video of the research here.\nThe process of diving deeply into a topic, receiving valuable mentorship, and exploring the frontier of knowledge ultimately sparked my interest in a scientific career.\n\n\n\nWe used the AMC towing tank to create the specific conditions required to generate soliton waves, and then measured the vessel response under different conditions. The results were interesting and the project was a lot of fun\n\n\nFollowing my engineering degree I volunteered in the USA with Montana Fish, Wildlife and Parks with the Wolf Program, which led me towards a Master of Science in Wildlife Management at the University of Otago. For my MSc thesis with Phil Seddon, Mike Paulin and Mariano Rodríguez Recio, we GPS-tracked kākā (Nestor meridionalis) in Orokonui Ecosanctuary, Dunedin, New Zealand.\n\n\n\nA kākā fitted with a Lotek GPS-VHF device with SWIFT fixes. Photo: Charlotte Patterson.\n\n\nWe assessed their space use and resource selection (via step selection functions), and how that changed throughout time. There were clear age-related patterns of both space use and resource selection, which correlated with higher mortality observations for younger kākā. The full thesis can be found here. The chapter about (dynamic) space use analyses has been published in Conservation Science and Practice and you can read the full paper here, or check out the description in the Research section of this website.\n\n\n\nWe used a sweeping window framework to assess how kākā space use changed throughout time, and how that differed between individuals of varying age.\n\n\nWe also assessed how the GPS devices that we used, which were Lotek PinPoint GPS VHF tags that used the SWIFT-fix snapshot algorithm were affected by vegetation and topography. This work was published in Animal Biotelemetry and you can read the full paper here, or check out the description in the Research section of this website.\nTo further explore the underlying models of animal movement, I am doing a PhD in Mathematical Sciences at the Queensland University of Technology (QUT) in collaboration with the Commonwealth Scientific and Industrial Research Organisation (CSIRO). My supervisors, Michael Bode and Christopher Drovandi at QUT, and Andrew Hoskins and Dan Pagendam at CSIRO, collaborators, Jonathan Potts and Conor Hassan, and I have delved further into step selection functions, particularly in relation to incorporating fine-scale temporal dynamics and using alternative approaches to represent and model the step selection process. We applied these models to water buffalo, which are an introduced and damaging species in northern Australia. CSIRO has led a project called ‘SpaceCows’, which has involved the data collection, analysis and management advice for water buffalo in the Northern Territory and feral cattle in Cape York, Queensland. I was lucky enough to head out and assist with the catching of water buffalo in the Northern Territory, which was quite a thrilling experience!\n\n\n\nThe water buffalo were mustered using helicopters and a series of mustering vehicles such as this one. This tagging protocol allows for the buffalo to be captured and released (with a GPS tag) in only a few minutes and reduces the need for anaesthetising the animals. Photo: Scott Forrest\n\n\nThe Australian Broadcasting Corporation (ABC) has covered the SpaceCows project in a news article and a Landline episode (I make an appearance for about 5 seconds from 2:43, even holding a clipboard…).\nThis work has been published in Ecography and you can read the full paper here, or check out the description in the Research section of this website.\nSome examples of the research that I have been involved with are shown in the Research section of this website."
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "Below is my CV as a pdf."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Not used."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "To the left are some less formal items that don’t fit in the other categories.",
    "crumbs": [
      "Blog"
    ]
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "",
    "text": "In this script we will provide some intuition for harmonic regression, and walk through how to reconstruct temporally dynamic coefficients when fitting step selection (or other) models with harmonic terms. We will use the example of a model fitted with two pairs of harmonics. We will then use the coefficients to reconstruct the selection surfaces from models fitted with linear and quadratic terms that were interacted with the harmonics.\nLoad packages\nLoading packages\noptions(scipen=999)\n\nlibrary(tidyverse)\npackages &lt;- c(\"lubridate\", \"tictoc\", \"TwoStepCLogit\", \"beepr\", \"scales\")\nwalk(packages, require, character.only = T)\nHarmonics are sine and cosine functions are periodic functions that repeat once per cycle, \\(T\\). When combined, they can be used to model complex periodic patterns, and with many harmonics can create very flexible functions.\nHarmonics can be considered similarly to splines or basis functions in that they are additive - if we add them all together we get a single, flexible function.\nLet’s say we have a single pair of harmonics, \\(s_1 = \\sin(2\\pi t / T)\\), and \\(c_1 = \\cos(2\\pi t / T)\\), where \\(t \\in T\\). For a yearly cycle for instance, \\(t\\) would be indexed as the day of the year, and \\(T = 365\\), although \\(t\\) does not need to be integer-valued, and can be arbitrarily fine. In the case of the model we are fitting here, \\(t\\) is the hour of the day, for \\(T\\) is the number of hours in a day, 24.\nCode\n# create a sequence of hours\nt &lt;- seq(0,23,0.1)\nT &lt;- 24\n\n# create the harmonic terms\nsin1 &lt;- sin(2 * pi * t / T)\ncos1 &lt;- cos(2 * pi * t / T)\n\n# plot the harmonic terms\nplot(t, sin1, type = \"l\", col = \"red\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic terms\", ylim = c(-2.5,2.5))\nlines(t, cos1, col = \"blue\")\nlines(t, rep(0,length(t)), lty = \"dashed\")\nNow what we can do is add them together to create a single function.\nCode\n# create a single function\nf_harmonic &lt;- sin1 + cos1\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\", \n     ylim = c(-2.5,2.5))\nlines(t, rep(0,length(t)), lty = \"dashed\")\nIt looks similar, although now the amplitude is greater (up to about 1.4 now), and that the peak has shifted to be an average of the sine and cosine functions (peak is now at 3 ( = 0 + 6 / 2). We can shift the location of the peak by giving one of the terms more influence.\nCode\n# create a single function\nf_harmonic &lt;- 2*sin1 + cos1\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\", ylim = c(-2.5,2.5))\nlines(t, rep(0,length(t)), lty = \"dashed\")\nIf we give more weight to the sine function, the peak will shift to the right, which is closer to the peak of the sine function, and vice versa. We can see it has also changed the amplitude, which now peaks above y = 2.\nWe can also add a constant term, which will just shift the entire function up or down.\nCode\n# create a single function\nf_harmonic &lt;- 1 + 2*sin1 + cos1\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\", ylim = c(-2.5,2.5))\nlines(t, rep(0,length(t)), lty = \"dashed\")\nWe can see that adding a constant, and by weighting the sin and cosine terms we can start to create a flexible function. If we only use 1 pair of harmonics we can only have one period, but if we use more pairs we can have more periods, and therefore more flexibility. Let’s add some more pairs of harmonics.\nCode\n# create two more harmonic terms\nsin2 &lt;- sin(4 * pi * t / T)\ncos2 &lt;- cos(4 * pi * t / T)\n\n# plot the harmonic terms\nplot(t, sin2, type = \"l\", col = \"red\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic terms\", ylim = c(-2.5,2.5))\nlines(t, cos2, col = \"blue\")\nlines(t, rep(0,length(t)), lty = \"dashed\")\nAgain we can add these together, and weight to shift the peak and change the amplitude.\nCode\n# create a single function\nf_harmonic &lt;- 0.5*sin2 + 1.5*cos2\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\", ylim = c(-2.5,2.5))\nlines(t, rep(0,length(t)), lty = \"dashed\")\nNow we can start to add all of our components together to create flexible functions (and there is really no limit to this - infinitely flexible functions can be created with infinitely many harmonic terms, which is called a Fourier series - for some very cool intuition about Fourier series check out: https://www.youtube.com/watch?v=r6sGWTCMz2k).\nCode\n# create a single function\nf_harmonic &lt;- 1 + 0.5*sin1 + 2*cos1 + 0.75*sin2 + 1.25*cos2\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\")\nlines(t, rep(0,length(t)), lty = \"dashed\")\nIf you play around with the weights you can estimate some really funky functions, and the function will just get more flexible the more harmonic terms that you add.\nCode\n# create more harmonic terms...\nsin3 &lt;- sin(6 * pi * t / T)\ncos3 &lt;- cos(6 * pi * t / T)\nsin4 &lt;- sin(8 * pi * t / T)\ncos4 &lt;- cos(8 * pi * t / T)\n\n# create a single function\nf_harmonic &lt;- 0.5 + 0.5*sin1 + 1.5*cos1 + 2*sin2 + 1.25*cos2 + 0.25*sin3 + 0.5*cos3 + 0.1*sin4 + 2*cos4\n\n# plot the function\nplot(t, f_harmonic, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Value\", \n     main = \"Harmonic function\")\nlines(t, rep(0,length(t)), lty = \"dashed\")\nHopefully now you have some intuition about what we are doing with the harmonic terms in our step selection function, in that we are estimating the weights of the sine and cosine functions, which are the coefficients from our fitted models. Pretty cool!\nLet’s have a look at some real data now, and fit a model with the harmonics."
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#fitting-the-model-with-two-pairs-of-harmonics",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#fitting-the-model-with-two-pairs-of-harmonics",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Fitting the model with two pairs of harmonics",
    "text": "Fitting the model with two pairs of harmonics\n\nCreating a data matrix\nFirst we create a data matrix to be provided to the model, and then we scale and centre the full data matrix, with respect to each of the columns. That means that all variables are scaled and centred after the data has been split into wet and dry season data, and also after creating the quadratic and harmonic terms (when using them).\nThis is where we interact the harmonic terms with our covariates. As we have already created the harmonic terms for the hour of the day (s1, c1, s2, etc), we just interact (multiply) these with each of the covariates, including the quadratic terms and movement parameters. As before, we create the data matrix with all quadratic and harmonic terms, and then scale the matrix by each column, and store the scaling and centering variables to reconstruct the natural scale coefficients (i.e. if we were to fit the model without centering and scaling).\n\n\nCode\nmonths_wet &lt;- c(1:4, 11:12)\nbuffalo_ids &lt;- unique(buffalo_data_all$id)\n\n# buffalo_data &lt;- buffalo_data_all %&gt;% filter(month %in% months_wet) # wet season\nbuffalo_data &lt;- buffalo_data_all %&gt;% filter(!month %in% months_wet) # dry season\n\nbuffalo_data_matrix_unscaled &lt;- buffalo_data %&gt;% transmute(\n  \n  ndvi = ndvi_temporal,\n  ndvi_s1 = ndvi_temporal * hour_s1,\n  ndvi_s2 = ndvi_temporal * hour_s2,\n  ndvi_c1 = ndvi_temporal * hour_c1,\n  ndvi_c2 = ndvi_temporal * hour_c2,\n  \n  ndvi_sq = ndvi_temporal ^ 2,\n  ndvi_sq_s1 = (ndvi_temporal ^ 2) * hour_s1,\n  ndvi_sq_s2 = (ndvi_temporal ^ 2) * hour_s2,\n  ndvi_sq_c1 = (ndvi_temporal ^ 2) * hour_c1,\n  ndvi_sq_c2 = (ndvi_temporal ^ 2) * hour_c2,\n  \n  canopy = canopy_01,\n  canopy_s1 = canopy_01 * hour_s1,\n  canopy_s2 = canopy_01 * hour_s2,\n  canopy_c1 = canopy_01 * hour_c1,\n  canopy_c2 = canopy_01 * hour_c2,\n  \n  canopy_sq = canopy_01 ^ 2,\n  canopy_sq_s1 = (canopy_01 ^ 2) * hour_s1,\n  canopy_sq_s2 = (canopy_01 ^ 2) * hour_s2,\n  canopy_sq_c1 = (canopy_01 ^ 2) * hour_c1,\n  canopy_sq_c2 = (canopy_01 ^ 2) * hour_c2,\n  \n  slope = slope,\n  slope_s1 = slope * hour_s1,\n  slope_s2 = slope * hour_s2,\n  slope_c1 = slope * hour_c1,\n  slope_c2 = slope * hour_c2,\n  \n  herby = veg_herby,\n  herby_s1 = veg_herby * hour_s1,\n  herby_s2 = veg_herby * hour_s2,\n  herby_c1 = veg_herby * hour_c1,\n  herby_c2 = veg_herby * hour_c2,\n  \n  step_l = sl,\n  step_l_s1 = sl * hour_s1,\n  step_l_s2 = sl * hour_s2,\n  step_l_c1 = sl * hour_c1,\n  step_l_c2 = sl * hour_c2,\n\n  log_step_l = log_sl,\n  log_step_l_s1 = log_sl * hour_s1,\n  log_step_l_s2 = log_sl * hour_s2,\n  log_step_l_c1 = log_sl * hour_c1,\n  log_step_l_c2 = log_sl * hour_c2,\n\n  cos_turn_a = cos_ta,\n  cos_turn_a_s1 = cos_ta * hour_s1,\n  cos_turn_a_s2 = cos_ta * hour_s2,\n  cos_turn_a_c1 = cos_ta * hour_c1,\n  cos_turn_a_c2 = cos_ta * hour_c2)\n\nbuffalo_data_matrix_scaled &lt;- scale(buffalo_data_matrix_unscaled)\n\n# store the scaling and centering attribues to recover the natural scale coefficients\nmean_vals &lt;- attr(buffalo_data_matrix_scaled, \"scaled:center\")\nsd_vals &lt;- attr(buffalo_data_matrix_scaled, \"scaled:scale\")\nscaling_attributes &lt;- data.frame(variable = names(buffalo_data_matrix_unscaled), \n                                 mean = mean_vals, sd = sd_vals)\n\nbuffalo_data_scaled_2p &lt;- data.frame(id = buffalo_data$id,  \n                                     step_id = buffalo_data$step_id, \n                                     y = buffalo_data$y, \n                                     buffalo_data_matrix_scaled)\n\n\n\n\nFormula with two pairs of harmonics\nWe add in all the terms in the model formula. We can see that we are adding all of these together, which allows us to add them together later to reconstruct the harmonic function.\n\n\nCode\nformula_twostep &lt;- y ~ \n  \n  ndvi +\n  ndvi_s1 +\n  ndvi_s2 +\n  ndvi_c1 +\n  ndvi_c2 +\n  \n  ndvi_sq +\n  ndvi_sq_s1 +\n  ndvi_sq_s2 +\n  ndvi_sq_c1 +\n  ndvi_sq_c2 +\n  \n  canopy +\n  canopy_s1 +\n  canopy_s2 +\n  canopy_c1 +\n  canopy_c2 +\n  \n  canopy_sq +\n  canopy_sq_s1 +\n  canopy_sq_s2 +\n  canopy_sq_c1 +\n  canopy_sq_c2 +\n  \n  slope +\n  slope_s1 +\n  slope_s2 +\n  slope_c1 +\n  slope_c2 +\n  \n  herby +\n  herby_s1 +\n  herby_s2 +\n  herby_c1 +\n  herby_c2 +\n  \n  step_l +\n  step_l_s1 +\n  step_l_s2 +\n  step_l_c1 +\n  step_l_c2 +\n  \n  log_step_l +\n  log_step_l_s1 +\n  log_step_l_s2 +\n  log_step_l_c1 +\n  log_step_l_c2 +\n\n  cos_turn_a +\n  cos_turn_a_s1 +\n  cos_turn_a_s2 +\n  cos_turn_a_c1 +\n  cos_turn_a_c2 +\n  \n  strata(step_id) +\n  cluster(id)"
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#fitting-the-model",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#fitting-the-model",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Fitting the model",
    "text": "Fitting the model\nAs we have already fitted the model, we will load it here, but if the model_fit object file doesn’t exist, it will run the model fitting code. Be careful here that if you change the model formula, you will need to delete or rename the model_fit file to re-run the model fitting code, otherwise it will just load the previous model.\n\n\nCode\n  tic()\n  model_twostep_2p_harms &lt;- Ts.estim(formula = formula_twostep,\n           data = buffalo_data_scaled_2p,\n           all.m.1 = TRUE,\n           D = \"UN(1)\",\n           itermax = 10000)\n  toc()\n\n\n573.44 sec elapsed"
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#check-the-model-output",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#check-the-model-output",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Check the model output",
    "text": "Check the model output\nIt will output a massive covariance matrix, which can be ignored for our purposes at the moment. We are interested in the coefficients, which are stored in the beta attribute of the model object.\n\n\nCode\nmodel_twostep_2p_harms$beta\n\n\n         ndvi       ndvi_s1       ndvi_s2       ndvi_c1       ndvi_c2 \n  1.161893282   0.714922760   0.113055141  -0.967183016   1.204151199 \n      ndvi_sq    ndvi_sq_s1    ndvi_sq_s2    ndvi_sq_c1    ndvi_sq_c2 \n -1.327782963  -0.428323139  -0.058775862   0.140541269  -0.438886908 \n       canopy     canopy_s1     canopy_s2     canopy_c1     canopy_c2 \n  0.243181981   0.169425294  -0.212793698   0.012453094   0.268704849 \n    canopy_sq  canopy_sq_s1  canopy_sq_s2  canopy_sq_c1  canopy_sq_c2 \n -0.330862304  -0.083271931   0.125532678  -0.204852262  -0.169402632 \n        slope      slope_s1      slope_s2      slope_c1      slope_c2 \n -0.182169983  -0.018788407  -0.073605924  -0.073079922  -0.057404958 \n        herby      herby_s1      herby_s2      herby_c1      herby_c2 \n -0.002559875  -0.017446527   0.002161114   0.131812567  -0.035708056 \n       step_l     step_l_s1     step_l_s2     step_l_c1     step_l_c2 \n -0.491817044  -0.123380017  -0.568516944  -0.161718824  -0.272122631 \n   log_step_l log_step_l_s1 log_step_l_s2 log_step_l_c1 log_step_l_c2 \n  0.249093381  -0.121921392  -0.143440949  -0.238005079   0.024836776 \n   cos_turn_a cos_turn_a_s1 cos_turn_a_s2 cos_turn_a_c1 cos_turn_a_c2 \n -0.005131786  -0.042839003  -0.183409526  -0.059710062  -0.026697570 \n\n\nCreate a dataframe of the coefficients with the scaling attributes, and return the coefficients to their natural scale by dividing by the scaling factor (standard deviation).\nAs we can see, we have a coefficient for each covariate by itself, and then one for each of the harmonics. These are the ‘weights’ that we played around with above, and we reconstruct them in exactly the same way. We also have the coefficients for the quadratic terms and the interactions with the harmonics, which I have denoted as ndvi_sq for instance. We will come back to these when we look at the selection surfaces.\n\n\nCode\n# creating data frame of model coefficients\ncoefs_clr &lt;- data.frame(coefs = names(model_twostep_2p_harms$beta), \n                        value = model_twostep_2p_harms$beta)\n\ncoefs_clr$scale_sd &lt;- scaling_attributes$sd\ncoefs_clr &lt;- coefs_clr %&gt;% mutate(value_nat = value / scale_sd)\nhead(coefs_clr, 10)\n\n\n\n  \n\n\n\nLet’s have a look at herbaceous vegetation as it didn’t have a quadratic term.\nFirstly, as above, we need a sequence of values that covers a full period (or the period that we want to construct the function over, which can be more or less than 1 period). The sequence can be arbitrarily finely spaced. The smaller the increment the smoother the function will be for plotting. When simulating data from the temporally dynamic coefficients, however, one would use the increment that relates to the data collection and model fitting (i.e. one hour in this case).\nHere we’ll use a finer resolution than above for smoother plotting\n\n\nCode\nhour_seq &lt;- seq(0,23.9,0.1)\n\n\nNow we can reconstruct the harmonic function using the formula that we put into our model by interacting the harmonic terms with each of the covariates, for a single covariate, let’s say herbaceous vegetation, this would be written down as:\n\\[\nf = \\beta_{herby} +\n\\beta_{herby\\_s1} \\sin\\left(\\frac{2\\pi t}{24}\\right) +\n\\beta_{herby\\_c1} \\cos\\left(\\frac{2\\pi t}{24}\\right) +\n\\beta_{herby\\_s2} \\sin\\left(\\frac{4\\pi t}{24}\\right) +\n\\beta_{herby\\_c2} \\cos\\left(\\frac{4\\pi t}{24}\\right)\n\\]\nWe can precompute the harmonic terms to make it a bit neater (as we did for the design matrix before fitting our model)\n\n\nCode\nt &lt;- hour_seq\nT &lt;- 24\n\nsin1 &lt;- sin(2 * pi * t / T)\ncos1 &lt;- cos(2 * pi * t / T)\nsin2 &lt;- sin(4 * pi * t / T)\ncos2 &lt;- cos(4 * pi * t / T)\n\n\nNow we just pull out the relevant coefficients (which are scalars (single numbers), like the weights we used above), multiply them by the harmonic terms (which are vectors representing the function through time), and add them together.\n\n\nCode\nherby_harmonic_function &lt;- coefs_clr$value[which(coefs_clr$coefs == \"herby\")] +\n  coefs_clr$value[which(coefs_clr$coefs == \"herby_s1\")] * sin1 +\n  coefs_clr$value[which(coefs_clr$coefs == \"herby_c1\")] * cos1 +\n  coefs_clr$value[which(coefs_clr$coefs == \"herby_s2\")] * sin2 +\n  coefs_clr$value[which(coefs_clr$coefs == \"herby_c2\")] * cos2\n\n# plot the function\nplot(t, herby_harmonic_function, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Coefficient value (scaled)\", \n     main = \"Herbaceous vegetation\")\nlines(t, rep(0,length(t)), lty = \"dashed\")\n\n\n\n\n\n\n\n\n\nFrom these we can see that buffalo select for herbaceous vegetation in the early morning and late afternoon, but have a reasonably strong avoidance of it in the middle of the day (and therefore a selection for woody vegetation). This aligns with what we know about buffalo behaviour (and the climate in Northern Australia’s tropical savannas), in that they are likely to be seeking shelter during this time due to high temperatures and sun."
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#reconstructing-temporally-dynamic-coefficients-using-matrix-multiplication",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#reconstructing-temporally-dynamic-coefficients-using-matrix-multiplication",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Reconstructing temporally dynamic coefficients using matrix multiplication",
    "text": "Reconstructing temporally dynamic coefficients using matrix multiplication\nNow that we know how the coefficients of the harmonics can be combined to form a temporally dynamic function, we can use a shortcut, which is matrix multiplication.\nFirst we create a matrix of the harmonics, which is just the sin and cos terms for each harmonic, and then we can multiply this by the coefficients to get the function. When we use two pairs of harmonics we will have 5 coefficients for each covariate (linear + 2 sine and 2 cosine), so there will be 5 columns in the matrix.\nFor matrix multiplication, the number of columns in the first matrix must be equal to the number of rows in the second matrix. The result will then have the same number of rows as the first matrix and the same number of columns as the second matrix.\nOr in other words, if we have a 24 x 5 matrix of harmonics and a 5 x 1 matrix of coefficients, we will get a 24 x 1 matrix of the function, which corresponds to our 24 hours of the day.\n\n\nCode\n# we'll return the increments back to 1 hour for this example, \n# just so everything is a bit clearer\nhour_seq &lt;- seq(0,23,1)\n\nhour_harmonics_matrix &lt;- as.matrix(data.frame(\"linear_term\" = rep(1, length(hour_seq)),\n                                              \"hour_s1\" = sin(2*pi*hour_seq/24),\n                                              \"hour_s2\" = sin(4*pi*hour_seq/24),\n                                              \"hour_c1\" = cos(2*pi*hour_seq/24),\n                                              \"hour_c2\" = cos(4*pi*hour_seq/24)))\n\n# now have a 24 x 5 matrix\nhead(hour_harmonics_matrix)\n\n\n     linear_term   hour_s1   hour_s2   hour_c1                    hour_c2\n[1,]           1 0.0000000 0.0000000 1.0000000  1.00000000000000000000000\n[2,]           1 0.2588190 0.5000000 0.9659258  0.86602540378443870761060\n[3,]           1 0.5000000 0.8660254 0.8660254  0.50000000000000011102230\n[4,]           1 0.7071068 1.0000000 0.7071068  0.00000000000000006123032\n[5,]           1 0.8660254 0.8660254 0.5000000 -0.49999999999999977795540\n[6,]           1 0.9659258 0.5000000 0.2588190 -0.86602540378443870761060\n\n\nWe can now pull out the coefficients for each covariate and multiply by the matrix to get our temporally dynamic function. I’ll do this bit by bit initially.\nStarting with the scaled NDVI covariate\n\n\nCode\n# this subsets the coefficients for the covariate of interest \n# (grepl uses string matching, and we include ndvi but exclude the quadratic term)\nndvi_coefs &lt;- coefs_clr %&gt;% filter(grepl(\"ndvi\", coefs) & !grepl(\"sq\", coefs)) \nndvi_coefs\n\n\n\n  \n\n\n\nCode\n# pull out the coefficients - this comes out as a column vector, \n# which we'll convert to a matrix\nndvi_coefs_matrix &lt;- matrix(ndvi_coefs %&gt;% pull(value))\nndvi_coefs_matrix\n\n\n           [,1]\n[1,]  1.1618933\n[2,]  0.7149228\n[3,]  0.1130551\n[4,] -0.9671830\n[5,]  1.2041512\n\n\nCode\n# now we can multiply the matrix by the coefficients to get the function\nndvi_harmonic_function &lt;- hour_harmonics_matrix %*% ndvi_coefs_matrix\n# ndvi_harmonic_function\n\n# plot the function\nplot(hour_seq, ndvi_harmonic_function, type = \"l\", col = \"black\", \n     xlab = \"Hour of the day\", ylab = \"Coefficient value\", \n     main = \"NDVI - linear term\")\nlines(hour_seq, rep(0,length(hour_seq)), lty = \"dashed\")\n\n\n\n\n\n\n\n\n\nNow we can just repeat the process for all of the covariates, and put it all into a dataframe.\n\n\nCode\n# back to the finer resolution for smoother plotting\nhour &lt;- seq(0,23.9,0.1)\n\nhour_harmonics_matrix &lt;- as.matrix(data.frame(\"linear_term\" = rep(1, length(hour)),\n                                              \"hour_s1\" = sin(2*pi*hour/24),\n                                              \"hour_s2\" = sin(4*pi*hour/24),\n                                              \"hour_c1\" = cos(2*pi*hour/24),\n                                              \"hour_c2\" = cos(4*pi*hour/24)))\n\nharmonics_df_2p &lt;- data.frame(\n  \"hour\" = hour,\n  \"ndvi\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"ndvi\", coefs) & !grepl(\"sq\", coefs)) %&gt;% pull(value)),\n  \"ndvi_2\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"ndvi_sq\", coefs)) %&gt;% pull(value)),\n  \"canopy\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"canopy\", coefs) & !grepl(\"sq\", coefs)) %&gt;% pull(value)),\n  \"canopy_2\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"canopy_sq\", coefs)) %&gt;% pull(value)),\n  \"slope\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"slope\", coefs)) %&gt;% pull(value)),\n  \"herby\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"herby\", coefs)) %&gt;% pull(value)),\n  \"sl\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"step\", coefs) & !grepl(\"log\", coefs)) %&gt;% pull(value)),\n  \"log_sl\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"log_step\", coefs)) %&gt;% pull(value)),\n  \"cos_ta\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"turn_a\", coefs)) %&gt;% pull(value))\n  )\n\nhead(harmonics_df_2p)\n\n\n\n  \n\n\n\nCode\n# turning into a long data frame for plotting with ggplot\nharmonics_df_2p_long &lt;- pivot_longer(harmonics_df_2p, cols = !1, names_to = \"coef\")\n\n\nNow we can plot all these together to see the temporal dynamics of the coefficients. Keep in mind that these are the scaled coefficients.\n\n\nCode\nggplot() +\n  geom_path(data = harmonics_df_2p_long,\n            aes(x = hour, y = value, colour = coef)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  scale_y_continuous(expression(Time-varying~parameter~values~beta)) +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,2)) +\n  scale_color_discrete(\"Estimate\") +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nWe can do the same with the natural scale coefficients.\n\n\nCode\nharmonics_nat_df_2p &lt;- data.frame(\n  \"hour\" = hour,\n  \"ndvi\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"ndvi\", coefs) & !grepl(\"sq\", coefs)) %&gt;% pull(value_nat)),\n  \"ndvi_2\" = hour_harmonics_matrix %*%\n    matrix(coefs_clr %&gt;% filter(grepl(\"ndvi_sq\", coefs)) %&gt;% pull(value_nat)),\n  \"canopy\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"canopy\", coefs) & !grepl(\"sq\", coefs)) %&gt;% pull(value_nat)),\n  \"canopy_2\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"canopy_sq\", coefs)) %&gt;% pull(value_nat)),\n  \"slope\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"slope\", coefs)) %&gt;% pull(value_nat)),\n  \"herby\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"herby\", coefs)) %&gt;% pull(value_nat)),\n  \"sl\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"step\", coefs) & !grepl(\"log\", coefs)) %&gt;% pull(value_nat)),\n  \"log_sl\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"log_step\", coefs)) %&gt;% pull(value_nat)),\n  \"cos_ta\" = hour_harmonics_matrix %*% \n    matrix(coefs_clr %&gt;% filter(grepl(\"turn_a\", coefs)) %&gt;% pull(value_nat))\n  )\n\nhead(harmonics_nat_df_2p)\n\n\n\n  \n\n\n\nCode\n# turning into a long data frame for plotting with ggplot\nharmonics_nat_df_2p_long &lt;- pivot_longer(harmonics_nat_df_2p, cols = !1, names_to = \"coef\")\n\n\nPlot the natural scale coefficients. These are now on quite different scales as the covariates are on different scales - particularly the previous space use density, which we’ll omit from this plot.\n\n\nCode\nggplot() +\n  geom_path(data = harmonics_nat_df_2p_long,\n            aes(x = hour, y = value, colour = coef)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  scale_y_continuous(expression(Time-varying~parameter~values~beta)) +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,2)) +\n  scale_color_discrete(\"Estimate\") +\n  theme_classic() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nTo update the Gamma and von Mises distribution from the tentative distributions from Fieberg et al. (2021), Appendix C, we just do the calculation at each time point.\n\n\nCode\ntentative_shape &lt;- 0.438167\ntentative_scale &lt;- 534.3507\ntentative_kappa &lt;- 0.1848126\n\nhour_coefs_nat_df_2p &lt;- harmonics_nat_df_2p %&gt;% mutate(shape = tentative_shape + log_sl,\n                                                 scale = 1/((1/tentative_scale) - sl),\n                                                 kappa = tentative_kappa + cos_ta)\n\n# turning into a long data frame\nhour_coefs_nat_long_2p &lt;- pivot_longer(hour_coefs_nat_df_2p, cols = !1, names_to = \"coef\")\n\n\nPlot the updated movement parameters - notice that we’re scaling the scale parameter by 1/1000 to make it more interpretable.\n\n\nCode\nggplot() +\n  geom_path(data = hour_coefs_nat_long_2p %&gt;% \n            filter(coef %in% c(\"shape\", \"kappa\")),\n            aes(x = hour, y = value, colour = coef)) +\n  geom_path(data = hour_coefs_nat_long_2p %&gt;%\n            filter(coef == \"scale\"),\n            aes(x = hour, y = value/1000, colour = coef)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  scale_y_continuous(\"Value of parameter\") +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,2)) +\n  scale_color_discrete(\"Estimate\") +\n  theme_classic() +\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#checking-temporally-dynamic-movement-parameters-against-observed-data",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#checking-temporally-dynamic-movement-parameters-against-observed-data",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Checking temporally dynamic movement parameters against observed data",
    "text": "Checking temporally dynamic movement parameters against observed data\nHere we sample from the updated step length distribution (we could also follow the same process for turning angles) to generate a distribution for each hour of the day, and assess how well it matches the observed step lengths.\n\n\nCode\n# summarise the observed step lengths\nmovement_summary &lt;- buffalo_data %&gt;% filter(y == 1) %&gt;%  group_by(id, hour) %&gt;% \n  summarise(mean_sl = mean(sl), median_sl = median(sl))\n\n\n`summarise()` has grouped output by 'id'. You can override using the `.groups`\nargument.\n\n\nCode\n# number of samples from the Gamma distribution\nn &lt;- 1e5\n\n# create some empty variables to store the results\ngamma_dist_list &lt;- vector(mode = \"list\", length = nrow(hour_coefs_nat_df_2p))\ngamma_mean &lt;- c()\ngamma_median &lt;- c()\ngamma_ratio &lt;- c()\n\nfor(hour_no in 1:nrow(hour_coefs_nat_df_2p)) {\n  \n  # sample from the Gamma distribution\n  gamma_dist_list[[hour_no]] &lt;- rgamma(n, shape = hour_coefs_nat_df_2p$shape[hour_no], \n                                       scale = hour_coefs_nat_df_2p$scale[hour_no])\n  \n  # summarise\n  gamma_mean[hour_no] &lt;- mean(gamma_dist_list[[hour_no]])\n  gamma_median[hour_no] &lt;- median(gamma_dist_list[[hour_no]])\n  gamma_ratio[hour_no] &lt;- gamma_mean[hour_no] / gamma_median[hour_no]\n\n}\n\ngamma_df_2p &lt;- data.frame(model = \"2p\", \n                          hour = hour_coefs_nat_df_2p$hour, \n                          mean = gamma_mean, \n                          median = gamma_median, \n                          ratio = gamma_ratio) \n\nmean_sl_2p &lt;- ggplot() +\n  geom_path(data = movement_summary, \n            aes(x = hour, y = mean_sl, colour = factor(id))) +\n  geom_path(data = gamma_df_2p, aes(x = hour, y = mean), \n            colour = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,2)) +\n  scale_y_continuous(\"Mean step length\") +\n  scale_colour_viridis_d(\"Buffalo\") +\n  ggtitle(\"Observed and modelled mean step length\",\n          subtitle = \"Two pairs of harmonics\") +\n  theme_classic() +\n  theme(legend.position = \"none\")\n\nmean_sl_2p\n\n\n\n\n\n\n\n\n\nCode\nmedian_sl_2p &lt;- ggplot() +\n  geom_path(data = movement_summary, \n            aes(x = hour, y = median_sl, colour = factor(id))) +\n  geom_path(data = gamma_df_2p, aes(x = hour, y = median), \n            colour = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,2)) +\n  scale_y_continuous(\"Median step length\") +\n  scale_colour_viridis_d(\"Buffalo\") +\n  ggtitle(\"Observed and modelled median step length\",\n          subtitle = \"Two pairs of harmonics\") +\n  theme_classic() +\n  theme(legend.position = \"none\")\n\nmedian_sl_2p"
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#selection-surface-for-ndvi",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#selection-surface-for-ndvi",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Selection surface for NDVI",
    "text": "Selection surface for NDVI\n\n\nCode\nndvi_min &lt;- min(buffalo_data$ndvi_temporal, na.rm = TRUE)\nndvi_max &lt;- max(buffalo_data$ndvi_temporal, na.rm = TRUE)\nndvi_seq &lt;- seq(ndvi_min, ndvi_max, length.out = 75)\n\n# Create empty data frame\nndvi_fresponse_df &lt;- data.frame(matrix(ncol = nrow(hour_coefs_nat_df_2p), \n                                       nrow = length(ndvi_seq)))\n# index across all time points\nfor(i in 1:nrow(hour_coefs_nat_df_2p)) {\n  # Extract the coefficient values for the linear and quadratic terms and \n  # multiply by the NDVI values\n  # Assign the vector as a column to the dataframe\n  ndvi_fresponse_df[,i] &lt;- (hour_coefs_nat_df_2p$ndvi[i] * ndvi_seq) + \n    (hour_coefs_nat_df_2p$ndvi_2[i] * (ndvi_seq ^ 2))\n}\n\nndvi_fresponse_df &lt;- data.frame(ndvi_seq, ndvi_fresponse_df)\ncolnames(ndvi_fresponse_df) &lt;- c(\"ndvi\", hour)\nndvi_fresponse_long &lt;- pivot_longer(ndvi_fresponse_df, cols = !1, names_to = \"hour\")\n\nndvi_contour_max &lt;- max(ndvi_fresponse_long$value) # 0.7890195\nndvi_contour_min &lt;- min(ndvi_fresponse_long$value) # -0.7945691\nndvi_contour_increment &lt;- (ndvi_contour_max-ndvi_contour_min)/10\n\nndvi_quad_2p &lt;- ggplot(data = ndvi_fresponse_long, aes(x = as.numeric(hour), y = ndvi)) +\n  geom_point(aes(colour = value)) + # colour = \"white\"\n  geom_contour(aes(z = value), \n               breaks = seq(ndvi_contour_increment, ndvi_contour_max, ndvi_contour_increment), \n               colour = \"black\", linewidth = 0.25, linetype = \"dashed\") +\n  geom_contour(aes(z = value), \n               breaks = seq(-ndvi_contour_increment, ndvi_contour_min, -ndvi_contour_increment), \n               colour = \"red\", linewidth = 0.25, linetype = \"dashed\") +\n  geom_contour(aes(z = value), breaks = 0, colour = \"black\", linewidth = 0.5) +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,6)) +\n  scale_y_continuous(\"NDVI value\", breaks = seq(-1, 1, 0.25)) +\n  scale_colour_viridis_c(\"Selection\") +\n  # ggtitle(\"Normalised Difference Vegetation Index (NDVI)\") +\n  theme_classic() +\n  theme(legend.position = \"right\")\n\nndvi_quad_2p\n\n\n\n\n\n\n\n\n\nWe can now see how the selection for NDVI changes throughout the day. We can clearly see the diurnal pattern of selection for NDVI, where the buffalo are seeking higher values of NDVI (centred on around 0.5) during the middle of the day, indicated by the positive coefficients, and relatively low selection for lower values of NDVI (centred on around 0.2) during the early morning and late afternoon, and negative coefficients for NDVI values above around 0.4, and strong selection against high values of NDVI. The selection against high NDVI values correlates with the movement dynamics, as they are likely moving through more open areas."
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#canopy-cover",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#canopy-cover",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Canopy cover",
    "text": "Canopy cover\n\n\nCode\ncanopy_min &lt;- min(buffalo_data$canopy_01, na.rm = TRUE)\ncanopy_max &lt;- max(buffalo_data$canopy_01, na.rm = TRUE)\ncanopy_seq &lt;- seq(canopy_min, canopy_max, length.out = 75)\n\n# Create empty data frame\ncanopy_fresponse_df &lt;- data.frame(matrix(ncol = nrow(hour_coefs_nat_df_2p), \n                                         nrow = length(canopy_seq)))\nfor(i in 1:nrow(hour_coefs_nat_df_2p)) {\n  # Assign the vector as a column to the dataframe\n  canopy_fresponse_df[,i] &lt;- (hour_coefs_nat_df_2p$canopy[i] * canopy_seq) + \n    (hour_coefs_nat_df_2p$canopy_2[i] * (canopy_seq ^ 2))\n}\n\ncanopy_fresponse_df &lt;- data.frame(canopy_seq, canopy_fresponse_df)\ncolnames(canopy_fresponse_df) &lt;- c(\"canopy\", hour)\ncanopy_fresponse_long &lt;- pivot_longer(canopy_fresponse_df, cols = !1, names_to = \"hour\")\n\ncanopy_contour_min &lt;- min(canopy_fresponse_long$value) # 0\ncanopy_contour_max &lt;- max(canopy_fresponse_long$value) # 2.181749\ncanopy_contour_increment &lt;- (canopy_contour_max-canopy_contour_min)/10\n\ncanopy_quad_2p &lt;- ggplot(data = canopy_fresponse_long, aes(x = as.numeric(hour), y = canopy)) +\n  geom_point(aes(colour = value)) +\n  geom_contour(aes(z = value), \n               breaks = seq(canopy_contour_increment, canopy_contour_max, canopy_contour_increment), \n               colour = \"black\", linewidth = 0.25, linetype = \"dashed\") +\n  geom_contour(aes(z = value),\n               breaks = seq(-canopy_contour_increment, canopy_contour_min, -canopy_contour_increment),\n               colour = \"red\", linewidth = 0.25, linetype = \"dashed\") +\n  geom_contour(aes(z = value), breaks = 0, colour = \"black\", linewidth = 0.5) +\n  scale_x_continuous(\"Hour\", breaks = seq(0,24,6)) +\n  scale_y_continuous(\"Canopy cover\", breaks = seq(0, 1, 0.25)) +\n  scale_colour_viridis_c(\"Selection\") +\n  # ggtitle(\"Canopy Cover\") +\n  theme_classic() +\n  theme(legend.position = \"right\")\n\ncanopy_quad_2p\n\n\n\n\n\n\n\n\n\nThe selection surface for Canopy cover tells a similar story to NDVI, with the buffalo selecting for higher values of canopy cover during the middle of the day, and lower values during the early morning and late afternoon, suggesting that they are seeking more cover during the hotter parts of the day. Overall the values of the coefficient are not as high as for NDVI, and only range between around -1 and +0.5, whereas for NDVI the coefficient ranges from -4 to +4, suggesting that NDVI is more influential."
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#references",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#references",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "References",
    "text": "References\n\n\nFieberg, John, Johannes Signer, Brian Smith, and Tal Avgar. 2021. “A ’How to’ Guide for Interpreting Parameters in Habitat-Selection Analyses.” The Journal of Animal Ecology 90 (5): 1027–43. https://doi.org/10.1111/1365-2656.13441."
  },
  {
    "objectID": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#session-info",
    "href": "files/DynamicSSF_Walkthrough_Harmonics_and_selection_surfaces.html#session-info",
    "title": "Reconstructing temporally dynamic coefficients and selection surfaces",
    "section": "Session info",
    "text": "Session info\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_Australia.utf8  LC_CTYPE=English_Australia.utf8   \n[3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C                      \n[5] LC_TIME=English_Australia.utf8    \n\ntime zone: Australia/Brisbane\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] scales_1.3.0        beepr_2.0           TwoStepCLogit_1.2.5\n [4] tictoc_1.2.1        lubridate_1.9.3     forcats_1.0.0      \n [7] stringr_1.5.1       dplyr_1.1.4         purrr_1.0.2        \n[10] readr_2.1.5         tidyr_1.3.1         tibble_3.2.1       \n[13] ggplot2_3.5.1       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4        generics_0.1.3    stringi_1.8.4     lattice_0.22-6   \n [5] hms_1.1.3         digest_0.6.37     magrittr_2.0.3    evaluate_1.0.0   \n [9] grid_4.4.1        timechange_0.3.0  fastmap_1.2.0     jsonlite_1.8.8   \n[13] Matrix_1.7-0      survival_3.6-4    audio_0.1-11      fansi_1.0.6      \n[17] viridisLite_0.4.2 isoband_0.2.7     cli_3.6.3         crayon_1.5.3     \n[21] rlang_1.1.4       bit64_4.0.5       munsell_0.5.1     splines_4.4.1    \n[25] withr_3.0.1       yaml_2.3.10       parallel_4.4.1    tools_4.4.1      \n[29] tzdb_0.4.0        colorspace_2.1-1  vctrs_0.6.5       R6_2.5.1         \n[33] lifecycle_1.0.4   htmlwidgets_1.6.4 bit_4.0.5         vroom_1.6.5      \n[37] pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.5      glue_1.7.0       \n[41] xfun_0.47         tidyselect_1.2.1  knitr_1.48        farver_2.1.2     \n[45] htmltools_0.5.8.1 labeling_0.4.3    rmarkdown_2.28    compiler_4.4.1"
  },
  {
    "objectID": "posts/test_blog.html",
    "href": "posts/test_blog.html",
    "title": "Test blog post",
    "section": "",
    "text": "A test blog post.",
    "crumbs": [
      "Blog",
      "Posts",
      "Test blog post"
    ]
  },
  {
    "objectID": "research/2024_dynamic_space_use.html",
    "href": "research/2024_dynamic_space_use.html",
    "title": "2024-dynamic-space-use",
    "section": "",
    "text": "Description\nA methodological contribution of this paper is the sweeping window dynamic space use approach. We think this provides a new angle for evaluating space use by assessing how it changes through time. In our case there were young and old kākā in Orokonui Ecosanctuary, and we found that the younger kākā were more dynamic in their space use, which led to more time spent outside the reserve. This was associated with a higher number of incidental mortality observations.\nIn the animation below the right panel is the area contained within the 95% contour of a dynamic Brownian Bridge Movement Model (dBBMM) occurrence distribution (OD).\n\nIt isn’t clear which are the young and old individuals, but we can plot them separately to illustrate the differences.\n\n\nOlder kākā (5 years or older)\nThe older individuals had smaller home ranges and less dynamic space use.\n\n\n\nYounger kākā (3 years of younger)\nThe younger individuals had much larger home ranges which were more dynamic.\n\nYou might also spot that there are two individuals that overlap a lot in their space use, which change in a similar way through time. These two individuals were Orokonui-fledged juveniles (rather than captive-raised) that appear to display exploratory behaviour, which is largely outside of the fence in the latter part of the tracking period.\n\nFor more scripts and data, please visit the GitHub repository: GitHub repo: https://github.com/swforrest/Kaka_HR_DynamicSpaceUse\nCheck out the full paper here",
    "crumbs": [
      "Research",
      "2024-dynamic-space-use"
    ]
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Here’s an overview of some research projects that I have been involved with, mostly linking to published papers.",
    "crumbs": [
      "Research"
    ]
  },
  {
    "objectID": "teaching/biol112_animal-biology.html",
    "href": "teaching/biol112_animal-biology.html",
    "title": "Animal Biology",
    "section": "",
    "text": "During 2021 and 2022 I was a Teaching Fellow at the University of Otago.",
    "crumbs": [
      "Teaching and Workshops",
      "Teaching",
      "Animal Biology"
    ]
  }
]